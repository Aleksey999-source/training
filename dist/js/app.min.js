/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n// let ul = document.querySelectorAll('#ul li');\r\n// for (let i = 0; i < ul.length; i++)\r\n// {\r\n//    ul[i].addEventListener('click', addSign);\r\n// }\r\n// function addSign()\r\n// {     \r\n//    this.innerHTML += '!';\r\n// }\r\n//-------------------------------------------------------------------------\r\n// let ul = document.querySelector('#ul2');\r\n// ul.addEventListener('click', (event) => {\r\n\r\n//    event.target.closest('li').innerHTML += '!';\r\n// });\r\n// let ul = document.querySelector('#ul3');\r\n// ul.addEventListener('click', (event) =>\r\n// {\r\n//    event.target.closest('li').innerHTML += '!';\r\n// });\r\n\r\n// let button = document.querySelector('.button');\r\n// button.addEventListener('click', addLi);\r\n// function addLi()\r\n// {\r\n//    let newLi = document.createElement('li');\r\n//    newLi.innerHTML = 'Новая LI';\r\n//    ul.appendChild(newLi);\r\n// }\r\n//---------------------------ЗАДАЧИ----------------------------------------\r\n// 1. Дан ul, в нем несколько li. Под ul сделайте кнопку, по нажатию на которую в конец ul будет добавляться новый li с текстом 'пункт'. Сделайте так, чтобы при клике на каждый li, ему в конец добавлялся '!'. Это должно работать и для вновь добавленных li. Задачу решите с помощью делегирования (то есть событие должно быть навешано на ul).\r\n\r\n// let ul = document.querySelector('#ul4');\r\n// ul.addEventListener('click', (event) =>\r\n// {\r\n//    event.target.closest('li').innerHTML += '!';\r\n// });\r\n\r\n// let button2 = document.querySelector('.button2');\r\n// button2.addEventListener('click', addLi);\r\n// function addLi()\r\n// {\r\n//    let newLi = document.createElement('li');\r\n//    newLi.innerHTML = 'Новая LI';\r\n//    ul.appendChild(newLi);\r\n// }\r\n// // 2. Дана таблица с юзерами с двумя колонками: имя и фамилия. Под таблицей сделайте форму, с помощью которой можно будет добавить нового юзера в таблицу. Сделайте так, чтобы при клике на любую ячейку появлялся prompt, с помощью которого можно изменить текст ячейки. Задачу решите с помощью делегирования (то есть событие должно быть навешано на table).\r\n// let table = document.querySelector('.table')\r\n// table.addEventListener('click', addName);\r\n\r\n// function addName(event){\r\n//    let str;\r\n//    if (event.target.tagName == 'TD') \r\n//    event.target.closest('td').innerHTML = prompt('Введите данные', str);\r\n// }\r\n// ------------------------------------------------Работа с формами--------------------------------------------------\r\n//  1. Дана форма с id=\"form\". В ней даны инпуты, в них числа. Дана кнопка. По нажатию на эту кнопку получите форму по ее id, затем циклом переберите все инпуты в ней и найдите сумму чисел из этих инпутов.\r\n\r\n// let button = document.querySelector('.form-button');\r\n\r\n// button.addEventListener('click', sumIn)\r\n\r\n// function sumIn()\r\n// {\r\n//    let form = document.querySelector('#form');\r\n//    let sum = 0;\r\n//    for (let i = 0; i < form.elements.length; i++)\r\n//    {\r\n//       sum += Number(form.elements[i].value);\r\n//    }\r\n//    alert('Сумма чисел равна:' + sum);\r\n// }\r\n// console.log(form.elements[0].innerHTML);\r\n//  2. На странице расположено несколько форм. В них есть инпуты, в инпутах числа. Дана кнопка. По нажатию на эту кнопку циклом переберите все формы на странице, затем циклом переберите все инпуты в каждой форме и найдите сумму чисел из всех этих инпутов. \r\nlet button = document.querySelector('.form-button2');\r\nbutton.addEventListener('click', sumAllIn);\r\n\r\nfunction sumAllIn()\r\n{\r\n   let sum = 0;\r\n   let form = document.forms;\r\n   for (let i = 1; i < form.length; i++)\r\n   {  \r\n      console.log()\r\n      for (let k = 0; k < form[i].elements.length; k++)\r\n      {\r\n         sum += Number(form[i].elements[k].value);\r\n      }\r\n   }\r\n   console.log(alert('Сумма чисел всех инпутов - ' + sum));\r\n}\r\n\r\n\r\n// -------------------------------------------------Работа с селектами-------------------------------------------------\r\n//  1. Дан селект. Дан инпут. По изменению селекта выведите текст выбранного пункта в инпут.\r\n\r\n//  2. Дан селект. Дан инпут. Дана кнопка. Сделайте так, чтобы в инпут можно было ввести число, нажать на кнопку и в селекте становился выбранным пункт с этим номером.\r\n\r\n//  3. Дан селект со списком стран. Сделайте так, чтобы при выборе страны рядом появлялся еще и селект со списком городов из этой страны.\r\n\r\n//  Даны 3 селекта: с днем, с месяцем и годом. Сделайте так, чтобы некорректную дату нельзя было выбрать.\r\n\r\n// Замыкание\r\n// var a = 12;\r\n// function f(){\r\n//    var b = 45;\r\n//    console.log(a);   // Область функции f замкнута на переменной a\r\n//    console.log(b);   \r\n// }\r\n// f();\r\n// f();\r\n// f();\r\n//----------------\r\n// function Counter()\r\n// {\r\n//    let count = 0;\r\n//    return function()\r\n//    {\r\n//       count++;\r\n\r\n//       return count;\r\n//    }\r\n// }\r\n// let counter = Counter();\r\n// console.log(counter());\r\n// console.log(counter());\r\n// console.log(counter());\r\n\r\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;